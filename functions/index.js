const functions = require("firebase-functions");
const admin = require("firebase-admin");
admin.initializeApp();

const firestore = admin.firestore();
const eventsCollection = firestore.collection("Events");

// Create an event
exports.createEvent = functions.https.onRequest((req, res) => {
  const event = req.body; // Assuming the request body contains the event data

  // Save the event to Firestore with the default doc ID generated by Firebase
  eventsCollection
      .add(event)
      .then((ref) => {
        res.status(201).json({
          id: ref.id,
          message: "Event created successfully"});
      })
      .catch((error) => {
        res.status(500).json({error: "Failed to create event"});
      });
});

// Read all events
exports.getEvents = functions.https.onRequest((req, res) => {
  eventsCollection
      .get()
      .then((snapshot) => {
        const events = [];
        snapshot.forEach((doc) => {
          const event = {
            id: doc.id,
            ...doc.data(),
          };
          events.push(event);
        });
        res.status(200).json(events);
      })
      .catch((error) => {
        res.status(500).json({error: "Failed to fetch events"});
      });
});

// Read a single event
exports.getEvent = functions.https.onRequest((req, res) => {
  const eventId = req.params.id; // Assuming the event ID

  eventsCollection
      .doc(eventId)
      .get()
      .then((doc) => {
        if (doc.exists) {
          const event = {
            id: doc.id,
            ...doc.data(),
          };
          res.status(200).json(event);
        } else {
          res.status(404).json({error: "Event not found"});
        }
      })
      .catch((error) => {
        res.status(500).json({error: "Failed to fetch event"});
      });
});

// Update an event
exports.updateEvent = functions.https.onRequest((req, res) => {
  const eventId = req.params.id; // Assuming
  const updatedEvent = req.body; // Assuming

  eventsCollection
      .doc(eventId)
      .update(updatedEvent)
      .then(() => {
        res.status(200).json({message: "Event updated successfully"});
      })
      .catch((error) => {
        res.status(500).json({error: "Failed to update event"});
      });
});

// Delete an event
exports.deleteEvent = functions.https.onRequest((req, res) => {
  const eventId = req.params.id; // Assuming

  eventsCollection
      .doc(eventId)
      .delete()
      .then(() => {
        res.status(200).json({message: "Event deleted successfully"});
      })
      .catch((error) => {
        res.status(500).json({error: "Failed to delete event"});
      });
});
